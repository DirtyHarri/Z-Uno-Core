
# Arduino ZUNO Core and platform.
# ------------------------------

# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5---3rd-party-Hardware-specification

name=Arduino ZUNO Boards
version=1.6.1

# ZUNO compile variables
# ---------------------
compiler.sdccOptions='-mmcs51 --out-fmt-ihx --model-large --verbose --debug --use-stdout --code-loc 0x8000 --xram-loc 0x3000'

#Windows x64
compiler.app=compiler.exe
compiler.sdccPath="{runtime.ide.path}\hardware\tools\sdcc\bin\"
tools.zprog.cmd.path={runtime.ide.path}\hardware\tools\zuno\compiler.exe
tools.zprog.upload.pattern="{cmd.path}" prog "{build.path}\{build.project_name}" -p "{runtime.ide.path}\hardware\tools\sdcc\bin\" -d {serial.port} -r {runtime.ide.path} -o '-mmcs51 --out-fmt-ihx --model-large --verbose --debug --use-stdout --code-loc 0x8000 --xram-loc 0x3000' 

# Default "compiler.path" is correct, change only if you want to overidde the initial value
compiler.path={runtime.ide.path}\hardware\tools\zuno\

compiler.c.cmd={compiler.app}

compiler.c.flags="{source_file}" -p {compiler.sdccPath} -r {runtime.ide.path} -o "{compiler.sdccOptions}"

compiler.c.elf.cmd=
compiler.c.elf.flags=

compiler.S.flags=
compiler.cpp.cmd=
compiler.cpp.flags=

compiler.ar.cmd=
compiler.ar.flags=

compiler.objcopy.cmd=
compiler.objcopy.eep.flags=
compiler.elf2hex.flags=

compiler.elf2hex.cmd=
compiler.ldflags=
compiler.size.cmd={compiler.app}

build.extra_flags=
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.S.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.objcopy.eep.extra_flags=
compiler.elf2hex.extra_flags=

# ZUNO compile patterns
# --------------------

recipe.c.o.pattern=
recipe.cpp.o.pattern=
recipe.S.o.pattern=
recipe.ar.pattern=
recipe.c.combine.pattern=
recipe.objcopy.eep.pattern=
recipe.objcopy.hex.pattern=

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" size "{build.path}\{build.project_name}" -p {compiler.sdccPath} -r {runtime.ide.path} -o "{compiler.sdccOptions}" 
recipe.size.regex=^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*
recipe.size.regex.eeprom=^(?:\.eeprom)\s+([0-9]+).*

# ZUNO Uploader/Programmers tools
# ------------------------------
tools.zprog.config.path=

upload.params.verbose=
tools.zprog.upload.params.verbose=-v
tools.zprog.upload.params.quiet=-q

tools.zprog.program.params.verbose=-v
tools.zprog.program.params.quiet=-q
tools.zprog.program.pattern="{cmd.path}" zprog "{build.path}\{build.project_name}" -p {compiler.sdccPath} -d {serial.port}

tools.zprog.erase.params.verbose=-v
tools.zprog.erase.params.quiet=-q -q
tools.zprog.erase.pattern="{cmd.path}" erase "{build.path}\{build.project_name}" -p {compiler.sdccPath} -d {serial.port}

tools.zprog.bootloader.params.verbose=-v
tools.zprog.bootloader.params.quiet=-q
tools.zprog.bootloader.pattern="{cmd.path}" bootloader "{build.path}\{build.project_name}" -p {compiler.sdccPath} -d {serial.port}

# USB Default Flags
# Default blank usb manufacturer will be filled it at compile time
# - from numeric vendor ID, set to Unknown otherwise
build.usb_manufacturer="Unknown"
build.usb_flags=-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'
